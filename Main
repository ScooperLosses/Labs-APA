
#include <iostream>
#include "Header.h"
#include <chrono>
#include <vector>
#include <cmath>


using namespace std::chrono;
using std::cout;
using std::endl;
using std::cin;
using std::vector;


int main(void){

    FibonacciAlgorithm* objectFibonacci = new FibonacciAlgorithm();
    int n;

    cout << "Introduceti valoarea pentu n: \n" << endl;
    cin >> n;
    cout << "\n" << endl;



    //-----------------------------------------------
    // -- Analiza empirica pentru [Metoda Recursiva] --
    //_______________________________________________

    auto startRecursiv = std::chrono::high_resolution_clock::now();

    cout << objectFibonacci->fibonacciRecursive(n) << endl;

    auto endRecursiv = std::chrono::high_resolution_clock::now();

    auto durationRecursiv = duration_cast<microseconds>(endRecursiv - startRecursiv);

    cout << "\n Algoritmul [Recursiv] s-a executat in: " << durationRecursiv.count() <<" microsecunde. \n" << endl;
    cout << "---------------------------------------------------------------------------------------------------" << endl;



    //-----------------------------------------------
    // -- Analiza empirica pentru [Metoda Iterativa] --
    //_______________________________________________

    auto startIterative = std::chrono::high_resolution_clock::now();
    long* iterativeArray = objectFibonacci->fibonacciIterative(n);
    auto endIterative = std::chrono::high_resolution_clock::now();

    cout << iterativeArray[n] << endl;

    auto durationIterative = duration_cast<microseconds>(endIterative - startIterative);

    cout << "\n Algoritmul [Iterativ] s-a executat in: " << durationIterative.count() << " microsecunde. \n" << endl;
    cout << "---------------------------------------------------------------------------------------------------" << endl;

    delete[] iterativeArray;



    //-----------------------------------------------
    // -- Analiza empirica pentru [Fibonacci-Binet] --
    //_______________________________________________

    auto startBinet = std::chrono::high_resolution_clock::now();
    double resBinet = objectFibonacci->fibonacciBinet(n);
    auto endBinet = std::chrono::high_resolution_clock::now();

    cout << resBinet << endl;

    auto durationBinet = duration_cast<microseconds>(endBinet - startBinet);

    cout << "\nAlgoritmul [Fibonacci-Binet] s-a executat in: " << durationBinet.count() <<" microsecunde. \n" << endl;
    cout << "---------------------------------------------------------------------------------------------------" << endl;



    //-----------------------------------------------
    //   -- Analiza empirica pentru [Memorizatie] --
    //_______________________________________________

    vector<long> memo(n + 1, -1);

    auto startMemo = std::chrono::high_resolution_clock::now();
    long resultMemo = objectFibonacci->fibonacciMemo(n, memo);
    auto endMemo = std::chrono::high_resolution_clock::now();

    auto durationMemo = duration_cast<microseconds>(endMemo - startMemo);

    cout << resultMemo << endl;

    cout << "\nAlgoritmul [Memoizatie] s-a executat in: " << durationMemo.count() << " microsecunde. \n" << endl;
    cout << "---------------------------------------------------------------------------------------------------" << endl;


    //-------------------------------------------------------------
   // -- Analiza empirica pentru [Metoda Inmultire prin Matrice] --
   //______________________________________________________________

    auto startMatrix = std::chrono::high_resolution_clock::now();
    long resultMatrix = objectFibonacci->fibonacciMatrix(n);
    auto endMatrix = std::chrono::high_resolution_clock::now();

    auto durationMatrix = duration_cast<microseconds>(endMatrix - startMatrix);

    cout << resultMatrix << endl;

    cout << "\nAlgoritmul [Inmultire prin Matrice] s-a executat in: " << durationMatrix.count() << " microsecunde. \n" << endl;
    cout << "---------------------------------------------------------------------------------------------------" << endl;

    delete objectFibonacci;

    return 0;
}

