
#include <iostream>
#include "Header.h"
#include <chrono>
#include <vector>
#include <cmath>


using namespace std::chrono;
using std::cout;
using std::endl;
using std::cin;
using std::vector;


int main(void) {
    FibonacciAlgorithm* objectFibonacci = new FibonacciAlgorithm();
    int n;
    
    cout << "Introduceti valoarea pentu n: \n" << endl;
    cin >> n;
    cout << "\n" << endl;

    long long** results = new long long* [2]; 
    results[0] = new long long[n + 1]; 
    results[1] = new long long[n + 1]; 
 


    //-----------------------------------------------
    // -- Analiza empirica pentru [Metoda Recursiva] --
    //_______________________________________________

    /*
    for (int i = 0; i <= n; i++) {
        auto start = std::chrono::high_resolution_clock::now();

        results[0][i] = objectFibonacci->fibonacciRecursive(i);

        auto end = std::chrono::high_resolution_clock::now();

        auto duration = duration_cast<microseconds>(end - start);

        results[1][i] = duration.count();
    }

    cout << "\n----------------------------------------------------" << endl;
    cout << " Analiza empirica pentru [Metoda Recursiva], n = " <<n<< endl;
    cout << "------------------------------------------------------\n" << endl;
    objectFibonacci->printArrays(results, n + 1);
    */
    

    //-----------------------------------------------
    // -- Analiza empirica pentru [Metoda Iterativa] --
    //_______________________________________________

    long long* iterativeArray = new long long[n + 1];

    for (int i = 0; i <= n; i++) {
        auto start = std::chrono::high_resolution_clock::now();

        iterativeArray = objectFibonacci->fibonacciIterative(i);

        for (int i = 0; i < n; i++) {
            results[0][i] = iterativeArray[i];
        }

        auto end = std::chrono::high_resolution_clock::now();

        auto duration = duration_cast<microseconds>(end - start);

        results[1][i] = duration.count();
    }

    cout << "\n------------------------------------------------------" << endl;
    cout << " Analiza empirica pentru [Metoda Iterativa], n = " << n << endl;
    cout << "--------------------------------------------------------\n" << endl;
    objectFibonacci->printArrays(results, n);



    //-----------------------------------------------
    // -- Analiza empirica pentru [Fibonacci-Binet] --
    //_______________________________________________

    for (int i = 0; i <= n; i++) {
        auto start = std::chrono::high_resolution_clock::now();

        results[0][i] = objectFibonacci->fibonacciBinet(i);

        auto end = std::chrono::high_resolution_clock::now();

        auto duration = duration_cast<microseconds>(end - start);

        results[1][i] = duration.count();
    }

    cout << "\n---------------------------------------------------" << endl;
    cout << " Analiza empirica pentru [Formula Binet], n = " <<n<< endl;
    cout << "-----------------------------------------------------\n" << endl;
    objectFibonacci->printArrays(results, n);


    
    //-----------------------------------------------
    //   -- Analiza empirica pentru [Memoizatie] --
    //_______________________________________________

    vector<long long> memo(n + 1, -1);

    for (int i = 0; i <= n; i++) {
        auto start = std::chrono::high_resolution_clock::now();

        results[0][i] = objectFibonacci->fibonacciMemo(i, memo);

        auto end = std::chrono::high_resolution_clock::now();

        auto duration = duration_cast<microseconds>(end - start);

        results[1][i] = duration.count();
    }

    cout << "\n-------------------------------------------------------" << endl;
    cout << " Analiza empirica pentru [Metoda Memoizatiei], n = " << n << endl;
    cout << "---------------------------------------------------------\n" << endl;
    objectFibonacci->printArrays(results, n);


  
    //-------------------------------------------------------------
    // -- Analiza empirica pentru [Metoda Inmultirei in Matrice] --
    //_____________________________________________________________

    for (int i = 0; i <= n; i++) {
        auto start = std::chrono::high_resolution_clock::now();

        results[0][i] = objectFibonacci->fibonacciMatrix(i);

        auto end = std::chrono::high_resolution_clock::now();

        auto duration = duration_cast<microseconds>(end - start);

        results[1][i] = duration.count();
    }

    cout << "------------------------------------------------------------------" << endl;
    cout << " Analiza empirica pentru [Metoda Inmutirei in Matrice], n = " << n << endl;
    cout << "------------------------------------------------------------------\n" << endl;
    objectFibonacci->printArrays(results, n);
    

    delete[] results;
    return 0;
}

